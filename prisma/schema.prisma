// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model StockData {
    id           Int       @id @default(autoincrement())
    ticker       String
    priceOpen   Float
    priceHigh    Float
    priceLow     Float
    priceClose  Float
    unit         String
    date         DateTime
    Volume      Float

    @@index([ticker, date])
}

model Ticker {
  id           Int      @id @default(autoincrement())
  ticker       String   @unique
  companyName  String
  industry     String
  exchange     String?
  country      String?

  @@index([ticker])
}

model Indicator {
  id            Int      @id @default(autoincrement())
  date          DateTime
  ticker        String
  marketName    String
  open          Float
  high          Float
  low           Float
  close         Float
  adjClose      Float
  volume        Float
  macd          Float?
  macdHistogram Float?
  macdSignal    Float?
  rsi           Float?
  bblower       Float?
  bbmiddle      Float?
  bbupper       Float?
  bbwidth       Float?
  bbpercent     Float?
  obv           Float
  sma20         Float?
  ema50         Float?
  stochK        Float?
  stochD        Float?
  adx           Float?
  dmp           Float?
  dmn           Float?
  williamsR     Float?
  cmf           Float?
  psarLong      Float?
  psarShort     Float?
  psarAf        Float
  psarReverse   Float
  obvInMillions Float

  @@unique([date, ticker, marketName])
  @@index([ticker, marketName, date])
}

model DailySummary {
  id          Int      @id @default(autoincrement())
  date        DateTime
  summaryText String   @db.Text
  ticker      String?
  tickerText  String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([date, ticker])
  @@index([date])
  @@index([ticker])
}
